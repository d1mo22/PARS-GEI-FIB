3-
 pushl %ebp
 movl %esp, %ebp
 pushl %ebx
 pushl %esi
 pushl %edi

 movl 8(%ebp), %eax         #%eax = @mata
 movl 12(%ebp), %ebx        #%ebx = @matb
 movl 16(%ebp), %ecx        #%ecx = @matc
 movl 20(%ebp), %edi        #%edi = n

 imul %edi, %edi            #%edi = n^2
 movl $0, %esi 
 jmp end_while

while:
 movb (%eax, %esi), %edx
 subb %edx, (%ebx, %esi)    #%edx = mata[i*n+j] - matb[i*n+j]
 movb %edx, (%ecx, %esi)
 cmpb $0, %edx
 jle else

if:
 movb $255, (%ecx, %esi)
 jmp end_if

else:
 movb $0, (%ecx, %esi)

end_if:
 incl %esi

end_while:
 cmpl %esi %edi
 jg while

 popl %esi
 popl %edi
 popl %ebx
 movl %ebp, %esp
 popl %ebp
 ret

4-
pushl $inmediato
pushl $0
pushl $0
pushl $0
movdqu (%esp), %xmm0

5- 
 pushl %ebp
 movl %esp, %ebp
 pushl %ebx
 pushl %esi
 
 movl 4(%ebp), %eax      #%eax = @mata
 movl 8(%ebp), %ebx      #%ebx = @matb
 movl 12(%ebp), %ecx     #%ecx = @matc
 movl 16(%ebp), %edi     #%edi = n
 
 imul %edx, %edx         #%edx = n^2
 movl $0, %esi           #iterador del bucle
 jmp end_while

while:
 movdqu (%eax, %esi), %xmm0
 psubb %xmm0, (%ebx, %esi)
 movdqu %xmm0, (%ecx, %esi)
 pcmpgtb $0, %xmm0
 jle else
if:
 movdqu $255, (%ecx, %esi)
 jmp end_if

else:
 movdqu $0, (%ecx, %esi)

end_if:
 addl $16, %esi

end_while:
 cmpl %esi, %edx
 jg while

 addl $-16, %esp
 popl %esi
 popl %ebx
 movl %ebp, %esp
 popl %ebp
 ret