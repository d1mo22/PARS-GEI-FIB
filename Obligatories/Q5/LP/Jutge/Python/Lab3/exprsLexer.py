# Generated from exprs.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,26,149,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,
        0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,
        3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,
        10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,
        15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,
        21,1,21,1,22,1,22,1,23,1,23,5,23,133,8,23,10,23,12,23,136,9,23,1,
        24,4,24,139,8,24,11,24,12,24,140,1,25,4,25,144,8,25,11,25,12,25,
        145,1,25,1,25,0,0,26,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
        21,43,22,45,23,47,24,49,25,51,26,1,0,4,2,0,65,90,97,122,4,0,48,57,
        65,90,95,95,97,122,1,0,48,57,3,0,9,10,13,13,32,32,151,0,1,1,0,0,
        0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
        13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
        23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,
        33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,
        43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,1,
        53,1,0,0,0,3,56,1,0,0,0,5,62,1,0,0,0,7,65,1,0,0,0,9,70,1,0,0,0,11,
        74,1,0,0,0,13,80,1,0,0,0,15,83,1,0,0,0,17,92,1,0,0,0,19,94,1,0,0,
        0,21,96,1,0,0,0,23,103,1,0,0,0,25,105,1,0,0,0,27,107,1,0,0,0,29,
        109,1,0,0,0,31,111,1,0,0,0,33,114,1,0,0,0,35,117,1,0,0,0,37,120,
        1,0,0,0,39,122,1,0,0,0,41,124,1,0,0,0,43,126,1,0,0,0,45,128,1,0,
        0,0,47,130,1,0,0,0,49,138,1,0,0,0,51,143,1,0,0,0,53,54,5,58,0,0,
        54,55,5,61,0,0,55,2,1,0,0,0,56,57,5,119,0,0,57,58,5,114,0,0,58,59,
        5,105,0,0,59,60,5,116,0,0,60,61,5,101,0,0,61,4,1,0,0,0,62,63,5,105,
        0,0,63,64,5,102,0,0,64,6,1,0,0,0,65,66,5,116,0,0,66,67,5,104,0,0,
        67,68,5,101,0,0,68,69,5,110,0,0,69,8,1,0,0,0,70,71,5,101,0,0,71,
        72,5,110,0,0,72,73,5,100,0,0,73,10,1,0,0,0,74,75,5,119,0,0,75,76,
        5,104,0,0,76,77,5,105,0,0,77,78,5,108,0,0,78,79,5,101,0,0,79,12,
        1,0,0,0,80,81,5,100,0,0,81,82,5,111,0,0,82,14,1,0,0,0,83,84,5,102,
        0,0,84,85,5,117,0,0,85,86,5,110,0,0,86,87,5,99,0,0,87,88,5,116,0,
        0,88,89,5,105,0,0,89,90,5,111,0,0,90,91,5,110,0,0,91,16,1,0,0,0,
        92,93,5,40,0,0,93,18,1,0,0,0,94,95,5,41,0,0,95,20,1,0,0,0,96,97,
        5,114,0,0,97,98,5,101,0,0,98,99,5,116,0,0,99,100,5,117,0,0,100,101,
        5,114,0,0,101,102,5,110,0,0,102,22,1,0,0,0,103,104,5,44,0,0,104,
        24,1,0,0,0,105,106,5,60,0,0,106,26,1,0,0,0,107,108,5,62,0,0,108,
        28,1,0,0,0,109,110,5,61,0,0,110,30,1,0,0,0,111,112,5,60,0,0,112,
        113,5,62,0,0,113,32,1,0,0,0,114,115,5,60,0,0,115,116,5,61,0,0,116,
        34,1,0,0,0,117,118,5,62,0,0,118,119,5,61,0,0,119,36,1,0,0,0,120,
        121,5,94,0,0,121,38,1,0,0,0,122,123,5,47,0,0,123,40,1,0,0,0,124,
        125,5,42,0,0,125,42,1,0,0,0,126,127,5,45,0,0,127,44,1,0,0,0,128,
        129,5,43,0,0,129,46,1,0,0,0,130,134,7,0,0,0,131,133,7,1,0,0,132,
        131,1,0,0,0,133,136,1,0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,
        48,1,0,0,0,136,134,1,0,0,0,137,139,7,2,0,0,138,137,1,0,0,0,139,140,
        1,0,0,0,140,138,1,0,0,0,140,141,1,0,0,0,141,50,1,0,0,0,142,144,7,
        3,0,0,143,142,1,0,0,0,144,145,1,0,0,0,145,143,1,0,0,0,145,146,1,
        0,0,0,146,147,1,0,0,0,147,148,6,25,0,0,148,52,1,0,0,0,4,0,134,140,
        145,1,6,0,0
    ]

class exprsLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    VAR = 24
    NUM = 25
    WS = 26

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "':='", "'write'", "'if'", "'then'", "'end'", "'while'", "'do'", 
            "'function'", "'('", "')'", "'return'", "','", "'<'", "'>'", 
            "'='", "'<>'", "'<='", "'>='", "'^'", "'/'", "'*'", "'-'", "'+'" ]

    symbolicNames = [ "<INVALID>",
            "VAR", "NUM", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "VAR", "NUM", "WS" ]

    grammarFileName = "exprs.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


